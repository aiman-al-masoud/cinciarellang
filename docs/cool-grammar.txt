statement ::=   expr_statement 
        | declr_statement 
        | comp_statement 
        | sel_statement
        | iter_statement
        | excep_statement
        | jump_statement
        | labelled_statement
        | import_statement


expr_statement ::= expression termin

comp_statement ::= '{' statement* '}'

excep_statement ::= 'throw' expression termin
                    | 'try' comp_stament ('catch' expression comp_stament)+ ['finally' comp_stament]


labelled_statement ::= case_statement | default_statement

case_statement = 'case' expression ':' comp_statement
default_statement= 'default' ':' comp_statement


import_statement ::= 'import' identifier('.' identifier)* 'from' string [ 'as' identifier ]

jump_statement ::= return_statement
                   | continue_statement
                   | break_statement

return_statement ::= 'return' [expression] (',' expression)* termin
continue_statement ::= 'continue' termin
break_statement ::= 'break' termin


sel_statement ::= if_statement 
		  | match_statement 
		  
if_statement = 'if' expression comp_stament ['else' comp_stament]		  
match_statement = 'match' expression (case_statement)+ [default_statement]

iter_statement = for_loop
	         | while_loop

for_loop ::= 'for' identifier (',' identifier)* 'of' expression comp_statement
while_loop ::= 'while' expression comp_statement


declr_statement ::= multi_declaration termin

multi_declaration ::= declaration (',' declaration)* 
declaration ::= [modifier*] identifier [':' type] 


multi_expression ::= expression (',' expression)* 


expression ::= assignment_expression | conditional_expression | object


object = lambda | class | interface | list | dict |comprehension


assignment_expression ::= (multi_expression | multi_declaration) assign_op multi_expression

conditional_expression :: = or_expression 
			    | or_expression '?' expression ':' conditional_expression

or_expression ::= and_expression 
		  | and_expression '||' or_expression


and_expression ::= comparison_expression
		   | comparison_expression '&&' and_expression


comparison_expression ::= additive_expression
		   	  | additive_expression comparision_op comparison_expression



additive_expression ::= multiplicative_expression
		        | multiplicative_expression add_op additive_expression
          

multiplicative_expression ::=   unary_expression 
                                | unary_expression mul_op multiplicative_expression


unary_expression ::= postfix_expression
                     | unary_op unary_expression


postfix_expression ::= primary_expression
                       | postfix_expression '[' expression | expression ':' expression ']'
                       | postfix_expression '(' multi_expression ')'
                       | postfix_expression '.' identifier
                       | postfix_expression '++'
                       | postfix_expression '--'

primary_expression ::= identifier
                       |constant
                       | '(' expression ')'



signature ::= modifier* '\' [multi_declaration] [':' type]  

lambda ::= signature '->' (comp_statement | expression)

class ::= modifier* 'class' ['listensto' identifier (',' identifier)*]  ['implements' identifier (',' identifier)*]  ['extends' identifier]   '{'  (multi_declaration)* (lambda)*  '}'                                 

interface ::= modifier* 'interface' '{'  (multi_declaration)*  (signature)*   '}'


// semantic note: '*' destructuring operator
list ::= '[' ('*' expression ',')* multi_expression  ']'
dict ::= '{' ('*' expression ',')* (expression ':' expression ',')* '}'

comprehension ::= list_comprehension
                |dict_comprehension


list_comprehension ::= '[' expression 'for' expression  ['where' expression] ']'
dict_comprehension ::= '{' expression ':' expression 'for' expression  ['where' expression] '}'


// semantic note: 'final': var not reassignable, 'immutable': obj internally not modifiable

modifier ::= 'private' | 'static' | 'final' | 'get' | 'set' | 'singleton' | 'pooled' | 'immutable'   
type ::=  'int' | 'float' | 'bool' | identifier
comparision_op ::= '==' | '!=' | '<' | '>' | '<=' | '>=' | 'is' | 'in'
add_op ::= '+' | '-'
mul_op ::= '*' | '/' | '%' | '**'
assign_op ::= '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '**='
unary_op ::= '!' | '-' | '++' | '--'
constant ::= integer | float | string | bool
string :: = "example" | 'example' | f"{example}"
termin ::= (';' | '\n')




